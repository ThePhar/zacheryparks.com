{"version":3,"sources":["components/Header.js","components/Footer.js","components/Banner.js","containers/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","title","Footer","Banner","style","fontSize","react_typed_default","strings","typeSpeed","backDelay","backSpeed","App","react","components_Header","components_Banner","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wQAmBiBA,MAfjB,WACI,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4CACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oEAAoEC,KAAK,2BAA2BC,MAAM,QAAvH,iBAGAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8CACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,yDAAyDC,KAAK,2BAA2BC,MAAM,QAA5G,QAGAL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kDAAkDC,KAAK,8BAA8BC,MAAM,UAAxG,UACAL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,0FAA0FC,KAAK,6BAA6BC,MAAM,WAA/I,oBCPCC,MAJjB,WACI,OACIN,EAAAC,EAAAC,cAAA,UAAQC,UAAU,WAAlB,yECgBSI,MAjBjB,WAGI,OACIP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBACVH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,GAAGK,MAAO,CAAEC,SAAU,SAAtC,OADJ,OAEQT,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CACIU,QAPJ,CAAC,uBAAwB,2BAA4B,wBAAyB,2BAA4B,4BAQtGC,UAAW,GACXC,UAAW,IACXC,UAAW,MAGvBd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAAb,+ICAKY,MAXjB,WACI,OACIf,EAAAC,EAAAC,cAACc,EAAA,SAAD,KACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wDACXH,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACgB,EAAD,MACAlB,EAAAC,EAAAC,cAACiB,EAAD,SCHIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4947043d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport '../stylesheets/components/Header.sass';\r\n\r\nfunction Header() {\r\n    return (\r\n        <nav className=\"db dt-l w-100 border-box pa3 ph5-l mv3-l\">\r\n            <a className=\"link hot-pink hover-white f3 f5-l dib tl-l tc mb2 mb0-l w-100 pa2\" href=\"http://zacheryparks.com/\" title=\"Home\">\r\n                Zachery Parks\r\n            </a>\r\n            <div className=\"navbar db dtc-l v-mid w-100 w-75-l tc tr-l\">\r\n                <a className=\"link hot-pink hover-white f6 f5-l dib mr3 mr4-l active\" href=\"http://zacheryparks.com/\" title=\"Home\">Home</a>\r\n                {/*<a className=\"link hot-pink hover-white f6 f5-l dib mr3 mr4-l\" href=\"#\" title=\"Blog\">Blog</a>*/}\r\n                {/*<a className=\"link hot-pink hover-white f6 f5-l dib mr3 mr4-l\" href=\"#\" title=\"About\">About</a>*/}\r\n                <a className=\"link hot-pink hover-white f6 f5-l dib mr3 mr4-l\" href=\"https://github.com/ThePhar/\" title=\"Github\">Github</a>\r\n                <a className=\"link bg-hot-pink white hover-bg-white bg-animate hover-hot-pink br2 f6 f5-l dib pa2 ph3\" href=\"mailto://zach@alliware.com\" title=\"Contact\">Contact</a>\r\n            </div>\r\n        </nav>\r\n);\r\n} export default Header;","import React from 'react';\r\n\r\nimport '../stylesheets/components/Footer.sass';\r\n\r\nfunction Footer() {\r\n    return (\r\n        <footer className=\"footer \">Designed and Developed by Zach Parks &copy; 2019</footer>\r\n    );\r\n} export default Footer;","import React from 'react';\r\nimport Typed from 'react-typed';\r\n\r\nimport '../stylesheets/components/Banner.sass';\r\n\r\nfunction Banner() {\r\n    const strings = ['me develop your app.', 'me develop your website.', 'me develop your idea.', 'me develop your passion.', 'me develop your project.'];\r\n\r\n    return (\r\n        <div className='mh4-l mh5 mb5 tc'>\r\n            <h1 className='f1-l f2-m f5'>\r\n                <code className='' style={{ fontSize: '115%' }}>let</code>&nbsp;\r\n                    <Typed\r\n                        strings={strings}\r\n                        typeSpeed={40}\r\n                        backDelay={2000}\r\n                        backSpeed={40}\r\n                    />\r\n            </h1>\r\n            <p className='tj-l f6-m f6-l f7'>My name is Zach, and I'm a full stack MERN developer with experience developing beautiful and responsive React + Node applications.</p>\r\n        </div>\r\n    );\r\n} export default Banner;","import React, { Fragment } from 'react';\r\n\r\nimport Header from '../components/Header';\r\nimport Footer from '../components/Footer';\r\nimport Banner from '../components/Banner';\r\n\r\nimport 'tachyons';\r\n\r\nfunction App() {\r\n    return (\r\n        <Fragment>\r\n            <div className='bg-image' />\r\n            <div className='flex flex-column justify-between items-center vh-100'>\r\n                <Header />\r\n                <Banner />\r\n                <Footer />\r\n            </div>\r\n        </Fragment>\r\n    );\r\n} export default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './stylesheets/index.sass';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}